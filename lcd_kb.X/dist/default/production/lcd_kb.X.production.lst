

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Feb 12 17:50:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           	psect	smallconst
    33  000600                     __psmallconst:
    34                           	opt stack 0
    35  000600  00                 	db	0
    36  000601                     _dpowers:
    37                           	opt stack 0
    38  000601  0001               	dw	1
    39  000603  000A               	dw	10
    40  000605  0064               	dw	100
    41  000607  03E8               	dw	1000
    42  000609  2710               	dw	10000
    43  00060B                     __end_of_dpowers:
    44                           	opt stack 0
    45  0000                     _LATD	set	3980
    46  0000                     _PORTD	set	3971
    47  0000                     _TRISD	set	3989
    48  00060B                     __stringdata:
    49                           	opt stack 0
    50  00060B                     STR_1:
    51  00060B  25                 	db	37
    52  00060C  69                 	db	105	;'i'
    53  00060D  00                 	db	0
    54  00060E                     __end_of__stringdata:
    55                           	opt stack 0
    56                           
    57                           ; #config settings
    58  00060E  00                 	db	0	; dummy byte at the end
    59  0000                     
    60                           	psect	cinit
    61  000B06                     __pcinit:
    62                           	opt stack 0
    63  000B06                     start_initialization:
    64                           	opt stack 0
    65  000B06                     __initialization:
    66                           	opt stack 0
    67  000B06                     end_of_initialization:
    68                           	opt stack 0
    69  000B06                     __end_of__initialization:
    70                           	opt stack 0
    71  000B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
    72  000B08  6EF8               	movwf	tblptru,c
    73  000B0A  0100               	movlb	0
    74  000B0C  EF47  F004         	goto	_main	;jump to C main() function
    75                           tblptru	equ	0xFF8
    76                           
    77                           	psect	cstackCOMRAM
    78  000001                     __pcstackCOMRAM:
    79                           	opt stack 0
    80  000001                     ??_lcdan_get_data:
    81  000001                     ?___lwdiv:
    82                           	opt stack 0
    83  000001                     lcdan_set_and_latch_4bits@data:
    84                           	opt stack 0
    85  000001                     delay_ms@n:
    86                           	opt stack 0
    87  000001                     ___lwdiv@dividend:
    88                           	opt stack 0
    89                           
    90                           ; 2 bytes @ 0x0
    91  000001                     	ds	1
    92  000002                     lcdan_set_and_latch_8bits@data:
    93                           	opt stack 0
    94                           
    95                           ; 1 bytes @ 0x1
    96  000002                     	ds	1
    97  000003                     ??_delay_ms:
    98  000003                     ___lwdiv@divisor:
    99                           	opt stack 0
   100                           
   101                           ; 2 bytes @ 0x2
   102  000003                     	ds	2
   103  000005                     ___lwdiv@quotient:
   104                           	opt stack 0
   105                           
   106                           ; 2 bytes @ 0x4
   107  000005                     	ds	2
   108  000007                     ___lwdiv@counter:
   109                           	opt stack 0
   110                           
   111                           ; 1 bytes @ 0x6
   112  000007                     	ds	1
   113  000008                     ?___lwmod:
   114                           	opt stack 0
   115  000008                     ___lwmod@dividend:
   116                           	opt stack 0
   117                           
   118                           ; 2 bytes @ 0x7
   119  000008                     	ds	1
   120  000009                     ??_lcdan_test_busy:
   121                           
   122                           ; 0 bytes @ 0x8
   123  000009                     	ds	1
   124  00000A                     lcdan_test_busy@busy_addr:
   125                           	opt stack 0
   126  00000A                     ___lwmod@divisor:
   127                           	opt stack 0
   128                           
   129                           ; 2 bytes @ 0x9
   130  00000A                     	ds	1
   131  00000B                     lcdan_test_busy@i:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xA
   135  00000B                     	ds	1
   136  00000C                     lcdan_write_cmd@cmd:
   137                           	opt stack 0
   138  00000C                     lcdan_write_data@data:
   139                           	opt stack 0
   140  00000C                     ___lwmod@counter:
   141                           	opt stack 0
   142                           
   143                           ; 1 bytes @ 0xB
   144  00000C                     	ds	1
   145  00000D                     ??_lcdan_init:
   146  00000D                     ?_sprintf:
   147                           	opt stack 0
   148  00000D                     lcdan_print_string@p:
   149                           	opt stack 0
   150  00000D                     sprintf@sp:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0xC
   154  00000D                     	ds	2
   155  00000F                     sprintf@f:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0xE
   159  00000F                     	ds	4
   160  000013                     ??_sprintf:
   161                           
   162                           ; 0 bytes @ 0x12
   163  000013                     	ds	2
   164  000015                     sprintf@ap:
   165                           	opt stack 0
   166                           
   167                           ; 2 bytes @ 0x14
   168  000015                     	ds	2
   169  000017                     sprintf@flag:
   170                           	opt stack 0
   171                           
   172                           ; 1 bytes @ 0x16
   173  000017                     	ds	1
   174  000018                     sprintf@prec:
   175                           	opt stack 0
   176                           
   177                           ; 1 bytes @ 0x17
   178  000018                     	ds	1
   179  000019                     sprintf@_val:
   180                           	opt stack 0
   181                           
   182                           ; 5 bytes @ 0x18
   183  000019                     	ds	5
   184  00001E                     sprintf@c:
   185                           	opt stack 0
   186                           
   187                           ; 1 bytes @ 0x1D
   188  00001E                     	ds	1
   189  00001F                     main@buff:
   190                           	opt stack 0
   191                           
   192                           ; 10 bytes @ 0x1E
   193  00001F                     	ds	10
   194  000029                     main@n:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x28
   198  000029                     	ds	2
   199                           tblptru	equ	0xFF8
   200                           
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 47 in file "main.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;  buff           10   30[COMRAM] unsigned char [10]
   211 ;;  n               2   40[COMRAM] unsigned int 
   212 ;; Return value:  Size  Location     Type
   213 ;;		None               void
   214 ;; Registers used:
   215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   216 ;; Tracked objects:
   217 ;;		On entry : 0/0
   218 ;;		On exit  : 0/0
   219 ;;		Unchanged: 0/0
   220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   221 ;;      Params:         0       0       0       0       0       0       0
   222 ;;      Locals:        12       0       0       0       0       0       0
   223 ;;      Temps:          0       0       0       0       0       0       0
   224 ;;      Totals:        12       0       0       0       0       0       0
   225 ;;Total ram usage:       12 bytes
   226 ;; Hardware stack levels required when called:    5
   227 ;; This function calls:
   228 ;;		_delay_ms
   229 ;;		_lcdan_init
   230 ;;		_lcdan_print_string
   231 ;;		_lcdan_write_cmd
   232 ;;		_sprintf
   233 ;; This function is called by:
   234 ;;		Startup code after reset
   235 ;; This function uses a non-reentrant model
   236 ;;
   237                           
   238                           	psect	text0
   239  00088E                     __ptext0:
   240                           	opt stack 0
   241  00088E                     _main:
   242                           	opt stack 26
   243                           
   244                           ;incstack = 0
   245  00088E  FFFF               	dw	65535
   246                           
   247                           ;main.c: 49: uint16_t n=0;
   248  000890  0E00               	movlw	0
   249  000892  6E2A               	movwf	main@n+1,c
   250  000894  0E00               	movlw	0
   251  000896  6E29               	movwf	main@n,c
   252                           
   253                           ;main.c: 50: char buff[10];
   254                           ;main.c: 52: lcdan_init();
   255  000898  ECBF  F003         	call	_lcdan_init	;wreg free
   256  00089C                     l1048:
   257                           
   258                           ;main.c: 59: {
   259                           ;main.c: 61: for (n=0;n<60;n++)
   260  00089C  0E00               	movlw	0
   261  00089E  6E2A               	movwf	main@n+1,c
   262  0008A0  0E00               	movlw	0
   263  0008A2  6E29               	movwf	main@n,c
   264  0008A4  0E3C               	movlw	60
   265  0008A6  5C29               	subwf	main@n,w,c
   266  0008A8  0E00               	movlw	0
   267  0008AA  582A               	subwfb	main@n+1,w,c
   268  0008AC  B0D8               	btfsc	status,0,c
   269  0008AE  D7F6               	goto	l1048
   270                           
   271                           ;main.c: 62: {
   272                           ;main.c: 63: do{lcdan_write_cmd((0x80)|0);}while(0);
   273  0008B0  0E80               	movlw	128
   274  0008B2  EC53  F005         	call	_lcdan_write_cmd
   275                           
   276                           ;main.c: 64: sprintf(buff,"%i",n);
   277  0008B6  0E00               	movlw	high main@buff
   278  0008B8  6E0E               	movwf	sprintf@sp+1,c
   279  0008BA  0E1F               	movlw	low main@buff
   280  0008BC  6E0D               	movwf	sprintf@sp,c
   281  0008BE  0E06               	movlw	high STR_1
   282  0008C0  6E10               	movwf	sprintf@f+1,c
   283  0008C2  0E0B               	movlw	low STR_1
   284  0008C4  6E0F               	movwf	sprintf@f,c
   285  0008C6  C029  F011         	movff	main@n,?_sprintf+4
   286  0008CA  C02A  F012         	movff	main@n+1,?_sprintf+5
   287  0008CE  EC08  F003         	call	_sprintf	;wreg free
   288                           
   289                           ;main.c: 65: lcdan_print_string(buff);
   290  0008D2  0E00               	movlw	high main@buff
   291  0008D4  6E0E               	movwf	lcdan_print_string@p+1,c
   292  0008D6  0E1F               	movlw	low main@buff
   293  0008D8  6E0D               	movwf	lcdan_print_string@p,c
   294  0008DA  EC0F  F005         	call	_lcdan_print_string	;wreg free
   295                           
   296                           ;main.c: 67: delay_ms(1000);
   297  0008DE  0E03               	movlw	3
   298  0008E0  6E02               	movwf	delay_ms@n+1,c
   299  0008E2  0EE8               	movlw	232
   300  0008E4  6E01               	movwf	delay_ms@n,c
   301  0008E6  EC24  F005         	call	_delay_ms	;wreg free
   302  0008EA  4A29               	infsnz	main@n,f,c
   303  0008EC  2A2A               	incf	main@n+1,f,c
   304  0008EE  D7DA               	goto	L1
   305  0008F0                     __end_of_main:
   306                           	opt stack 0
   307                           tblptru	equ	0xFF8
   308                           status	equ	0xFD8
   309                           
   310 ;; *************** function _sprintf *****************
   311 ;; Defined at:
   312 ;;		line 492 in file "/opt/microchip/xc8/v1.33/sources/common/doprnt.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;  sp              2   12[COMRAM] PTR unsigned char 
   315 ;;		 -> main@buff(10), 
   316 ;;  f               2   14[COMRAM] PTR const unsigned char 
   317 ;;		 -> STR_1(3), 
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  _val            5   24[COMRAM] struct .
   320 ;;  ap              2   20[COMRAM] PTR void [1]
   321 ;;		 -> ?_sprintf(2), 
   322 ;;  c               1   29[COMRAM] char 
   323 ;;  prec            1   23[COMRAM] char 
   324 ;;  flag            1   22[COMRAM] unsigned char 
   325 ;; Return value:  Size  Location     Type
   326 ;;                  2   12[COMRAM] int 
   327 ;; Registers used:
   328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   334 ;;      Params:         6       0       0       0       0       0       0
   335 ;;      Locals:        10       0       0       0       0       0       0
   336 ;;      Temps:          2       0       0       0       0       0       0
   337 ;;      Totals:        18       0       0       0       0       0       0
   338 ;;Total ram usage:       18 bytes
   339 ;; Hardware stack levels used:    1
   340 ;; Hardware stack levels required when called:    1
   341 ;; This function calls:
   342 ;;		___lwdiv
   343 ;;		___lwmod
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text1
   350  000610                     __ptext1:
   351                           	opt stack 0
   352  000610                     _sprintf:
   353                           	opt stack 29
   354                           
   355                           ;incstack = 0
   356  000610  FFFF               	dw	65535
   357                           
   358                           ;doprnt.c: 494: va_list ap;
   359                           ;doprnt.c: 499: signed char c;
   360                           ;doprnt.c: 506: signed char prec;
   361                           ;doprnt.c: 508: unsigned char flag;
   362                           ;doprnt.c: 527: union {
   363                           ;doprnt.c: 528: unsigned int _val;
   364                           ;doprnt.c: 529: struct {
   365                           ;doprnt.c: 530: const char * _cp;
   366                           ;doprnt.c: 531: unsigned _len;
   367                           ;doprnt.c: 532: } _str;
   368                           ;doprnt.c: 533: } _val;
   369                           ;doprnt.c: 542: *ap = __va_start();
   370  000612  0E00               	movlw	high (?_sprintf+4)
   371  000614  6E16               	movwf	sprintf@ap+1,c
   372  000616  0E11               	movlw	low (?_sprintf+4)
   373  000618  6E15               	movwf	sprintf@ap,c
   374                           
   375                           ;doprnt.c: 545: while(c = *f++) {
   376  00061A  D09D               	goto	l1020
   377  00061C                     l968:
   378                           
   379                           ;doprnt.c: 547: if(c != '%')
   380  00061C  501E               	movf	sprintf@c,w,c
   381  00061E  0A25               	xorlw	37
   382  000620  B4D8               	btfsc	status,2,c
   383  000622  D009               	goto	l974
   384                           
   385                           ;doprnt.c: 549: {
   386                           ;doprnt.c: 550: ((*sp++ = (c)));
   387  000624  C00D  FFD9         	movff	sprintf@sp,fsr2l
   388  000628  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   389  00062C  C01E  FFDF         	movff	sprintf@c,indf2
   390  000630  4A0D               	infsnz	sprintf@sp,f,c
   391  000632  2A0E               	incf	sprintf@sp+1,f,c
   392                           
   393                           ;doprnt.c: 551: continue;
   394  000634  D090               	goto	l1020
   395  000636                     l974:
   396                           
   397                           ;doprnt.c: 552: }
   398                           ;doprnt.c: 557: flag = 0;
   399  000636  0E00               	movlw	0
   400  000638  6E17               	movwf	sprintf@flag,c
   401                           
   402                           ;doprnt.c: 831: }
   403                           
   404                           ;doprnt.c: 822: continue;
   405                           
   406                           ;doprnt.c: 811: default:
   407                           
   408                           ;doprnt.c: 707: case 'i':
   409                           ;doprnt.c: 708: break;
   410                           
   411                           ;doprnt.c: 706: case 'd':
   412                           
   413                           ;doprnt.c: 647: goto alldone;
   414                           
   415                           ;doprnt.c: 646: case 0:
   416                           
   417                           ;doprnt.c: 644: switch(c = *f++) {
   418  00063A  C00F  FFF6         	movff	sprintf@f,tblptrl
   419  00063E  C010  FFF7         	movff	sprintf@f+1,tblptrh
   420  000642  4A0F               	infsnz	sprintf@f,f,c
   421  000644  2A10               	incf	sprintf@f+1,f,c
   422  000646                     	if	0	;tblptru may be non-zero
   423  000646                     	endif
   424  000646                     	if	0	;tblptru may be non-zero
   425  000646                     	endif
   426  000646  0008               	tblrd		*
   427  000648  FFFF               	dw	65535	; errata NOP
   428  00064A  CFF5 F01E          	movff	tablat,sprintf@c
   429  00064E  501E               	movf	sprintf@c& (0+255),w,c
   430                           
   431                           ; Switch size 1, requested type "space"
   432                           ; Number of cases is 3, Range of values is 0 to 105
   433                           ; switch strategies available:
   434                           ; Name         Instructions Cycles
   435                           ; simple_byte           10     6 (average)
   436                           ;	Chosen strategy is simple_byte
   437  000650  0A00               	xorlw	0	; case 0
   438  000652  B4D8               	btfsc	status,2,c
   439  000654  D08C               	goto	l1022
   440  000656  0A64               	xorlw	100	; case 100
   441  000658  B4D8               	btfsc	status,2,c
   442  00065A  D003               	goto	l980
   443  00065C  0A0D               	xorlw	13	; case 105
   444  00065E  A4D8               	btfss	status,2,c
   445  000660  D07A               	goto	l1020
   446  000662                     l980:
   447                           
   448                           ;doprnt.c: 1262: {
   449                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   450  000662  C015  FFD9         	movff	sprintf@ap,fsr2l
   451  000666  C016  FFDA         	movff	sprintf@ap+1,fsr2h
   452  00066A  CFDE F019          	movff	postinc2,sprintf@_val
   453  00066E  CFDD F01A          	movff	postdec2,sprintf@_val+1
   454  000672  0E02               	movlw	2
   455  000674  2615               	addwf	sprintf@ap,f,c
   456  000676  0E00               	movlw	0
   457  000678  2216               	addwfc	sprintf@ap+1,f,c
   458                           
   459                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   460  00067A  501A               	movf	sprintf@_val+1,w,c
   461  00067C  0A80               	xorlw	128
   462  00067E  6EF3               	movwf	prodl,c
   463  000680  0E80               	movlw	128
   464  000682  5CF3               	subwf	prodl,w,c
   465  000684  0E00               	movlw	0
   466  000686  B4D8               	btfsc	status,2,c
   467  000688  5C19               	subwf	sprintf@_val,w,c
   468  00068A  B0D8               	btfsc	status,0,c
   469  00068C  D006               	goto	l990
   470                           
   471                           ;doprnt.c: 1271: flag |= 0x03;
   472  00068E  0E03               	movlw	3
   473  000690  1217               	iorwf	sprintf@flag,f,c
   474                           
   475                           ;doprnt.c: 1272: _val._val = -_val._val;
   476  000692  6C19               	negf	sprintf@_val,c
   477  000694  1E1A               	comf	sprintf@_val+1,f,c
   478  000696  B0D8               	btfsc	status,0,c
   479  000698  2A1A               	incf	sprintf@_val+1,f,c
   480  00069A                     l990:
   481                           
   482                           ;doprnt.c: 1273: }
   483                           ;doprnt.c: 1275: }
   484                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   485  00069A  0E01               	movlw	1
   486  00069C  6E1E               	movwf	sprintf@c,c
   487  00069E  501E               	movf	sprintf@c,w,c
   488  0006A0  0A05               	xorlw	5
   489  0006A2  B4D8               	btfsc	status,2,c
   490  0006A4  D018               	goto	l1004
   491                           
   492                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   493  0006A6  501E               	movf	sprintf@c,w,c
   494  0006A8  0D02               	mullw	2
   495  0006AA  0E01               	movlw	low _dpowers
   496  0006AC  24F3               	addwf	prodl,w,c
   497  0006AE  6EF6               	movwf	tblptrl,c
   498  0006B0  0E06               	movlw	high _dpowers
   499  0006B2  20F4               	addwfc	prodh,w,c
   500  0006B4  6EF7               	movwf	tblptrh,c
   501  0006B6                     	if	0	;There are less than 3 active tblptr bytes
   502  0006B6                     	endif
   503  0006B6  0009               	tblrd		*+
   504  0006B8  FFFF               	dw	65535	; errata NOP
   505  0006BA  CFF5 F013          	movff	tablat,??_sprintf
   506  0006BE  0009               	tblrd		*+
   507  0006C0  FFFF               	dw	65535	; errata NOP
   508  0006C2  CFF5 F014          	movff	tablat,??_sprintf+1
   509  0006C6  5013               	movf	??_sprintf,w,c
   510  0006C8  5C19               	subwf	sprintf@_val,w,c
   511  0006CA  5014               	movf	??_sprintf+1,w,c
   512  0006CC  581A               	subwfb	sprintf@_val+1,w,c
   513  0006CE  A0D8               	btfss	status,0,c
   514  0006D0  D002               	goto	l1004
   515                           
   516                           ;doprnt.c: 1316: break;
   517  0006D2  2A1E               	incf	sprintf@c,f,c
   518  0006D4  D7E4               	goto	L2
   519  0006D6                     l1004:
   520                           
   521                           ;doprnt.c: 1431: {
   522                           ;doprnt.c: 1447: if(flag & 0x03)
   523  0006D6  C017  F013         	movff	sprintf@flag,??_sprintf
   524  0006DA  0E03               	movlw	3
   525  0006DC  1613               	andwf	??_sprintf,f,c
   526  0006DE  B4D8               	btfsc	status,2,c
   527  0006E0  D008               	goto	l1010
   528                           
   529                           ;doprnt.c: 1448: ((*sp++ = ('-')));
   530  0006E2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   531  0006E6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   532  0006EA  0E2D               	movlw	45
   533  0006EC  6EDF               	movwf	indf2,c
   534  0006EE  4A0D               	infsnz	sprintf@sp,f,c
   535  0006F0  2A0E               	incf	sprintf@sp+1,f,c
   536  0006F2                     l1010:
   537                           
   538                           ;doprnt.c: 1478: }
   539                           ;doprnt.c: 1481: prec = c;
   540  0006F2  C01E  F018         	movff	sprintf@c,sprintf@prec
   541                           
   542                           ;doprnt.c: 1483: while(prec--) {
   543  0006F6  D02B               	goto	l1018
   544  0006F8                     l1012:
   545                           
   546                           ;doprnt.c: 1487: {
   547                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   548  0006F8  5018               	movf	sprintf@prec,w,c
   549  0006FA  0D02               	mullw	2
   550  0006FC  0E01               	movlw	low _dpowers
   551  0006FE  24F3               	addwf	prodl,w,c
   552  000700  6EF6               	movwf	tblptrl,c
   553  000702  0E06               	movlw	high _dpowers
   554  000704  20F4               	addwfc	prodh,w,c
   555  000706  6EF7               	movwf	tblptrh,c
   556  000708                     	if	0	;There are less than 3 active tblptr bytes
   557  000708                     	endif
   558  000708  0009               	tblrd		*+
   559  00070A  FFFF               	dw	65535	; errata NOP
   560  00070C  CFF5 F003          	movff	tablat,___lwdiv@divisor
   561  000710  000A               	tblrd		*-
   562  000712  FFFF               	dw	65535	; errata NOP
   563  000714  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   564  000718  C019  F001         	movff	sprintf@_val,___lwdiv@dividend
   565  00071C  C01A  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
   566  000720  ECA7  F004         	call	___lwdiv	;wreg free
   567  000724  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   568  000728  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   569  00072C  0E00               	movlw	0
   570  00072E  6E0B               	movwf	___lwmod@divisor+1,c
   571  000730  0E0A               	movlw	10
   572  000732  6E0A               	movwf	___lwmod@divisor,c
   573  000734  ECD2  F004         	call	___lwmod	;wreg free
   574  000738  5008               	movf	?___lwmod,w,c
   575  00073A  0F30               	addlw	48
   576  00073C  6E1E               	movwf	sprintf@c,c
   577                           
   578                           ;doprnt.c: 1532: }
   579                           ;doprnt.c: 1533: ((*sp++ = (c)));
   580  00073E  C00D  FFD9         	movff	sprintf@sp,fsr2l
   581  000742  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   582  000746  C01E  FFDF         	movff	sprintf@c,indf2
   583  00074A  4A0D               	infsnz	sprintf@sp,f,c
   584  00074C  2A0E               	incf	sprintf@sp+1,f,c
   585  00074E                     l1018:
   586  00074E  0618               	decf	sprintf@prec,f,c
   587  000750  2818               	incf	sprintf@prec& (0+255),w,c
   588  000752  A4D8               	btfss	status,2,c
   589  000754  D7D1               	goto	l1012
   590  000756                     l1020:
   591  000756  C00F  FFF6         	movff	sprintf@f,tblptrl
   592  00075A  C010  FFF7         	movff	sprintf@f+1,tblptrh
   593  00075E  4A0F               	infsnz	sprintf@f,f,c
   594  000760  2A10               	incf	sprintf@f+1,f,c
   595  000762                     	if	0	;tblptru may be non-zero
   596  000762                     	endif
   597  000762                     	if	0	;tblptru may be non-zero
   598  000762                     	endif
   599  000762  0008               	tblrd		*
   600  000764  FFFF               	dw	65535	; errata NOP
   601  000766  CFF5 F01E          	movff	tablat,sprintf@c
   602  00076A  661E               	tstfsz	sprintf@c& (0+255),c
   603  00076C  D757               	goto	l968
   604  00076E                     l1022:
   605                           
   606                           ;doprnt.c: 1547: *sp = 0;
   607  00076E  C00D  FFD9         	movff	sprintf@sp,fsr2l
   608  000772  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   609  000776  0E00               	movlw	0
   610  000778  6EDF               	movwf	indf2,c
   611                           
   612                           ;doprnt.c: 1549: return 0;
   613                           ;	Return value of _sprintf is never used
   614  00077A  0012               	return	
   615  00077C  FFFF               	dw	65535	; errata NOP
   616  00077E                     __end_of_sprintf:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           prodh	equ	0xFF4
   623                           prodl	equ	0xFF3
   624                           indf2	equ	0xFDF
   625                           postinc2	equ	0xFDE
   626                           postdec2	equ	0xFDD
   627                           fsr2h	equ	0xFDA
   628                           fsr2l	equ	0xFD9
   629                           status	equ	0xFD8
   630                           
   631 ;; *************** function ___lwmod *****************
   632 ;; Defined at:
   633 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/lwmod.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;  dividend        2    7[COMRAM] unsigned int 
   636 ;;  divisor         2    9[COMRAM] unsigned int 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  counter         1   11[COMRAM] unsigned char 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  2    7[COMRAM] unsigned int 
   641 ;; Registers used:
   642 ;;		wreg, status,2, status,0
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   648 ;;      Params:         4       0       0       0       0       0       0
   649 ;;      Locals:         1       0       0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0
   651 ;;      Totals:         5       0       0       0       0       0       0
   652 ;;Total ram usage:        5 bytes
   653 ;; Hardware stack levels used:    1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_sprintf
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text2
   662  0009A4                     __ptext2:
   663                           	opt stack 0
   664  0009A4                     ___lwmod:
   665                           	opt stack 29
   666                           
   667                           ;incstack = 0
   668  0009A4  FFFF               	dw	65535
   669  0009A6  500B               	movf	___lwmod@divisor+1,w,c
   670  0009A8  100A               	iorwf	___lwmod@divisor,w,c
   671  0009AA  B4D8               	btfsc	status,2,c
   672  0009AC  D018               	goto	l737
   673  0009AE  0E01               	movlw	1
   674  0009B0  6E0C               	movwf	___lwmod@counter,c
   675  0009B2  D004               	goto	l922
   676  0009B4                     l920:
   677  0009B4  90D8               	bcf	status,0,c
   678  0009B6  360A               	rlcf	___lwmod@divisor,f,c
   679  0009B8  360B               	rlcf	___lwmod@divisor+1,f,c
   680  0009BA  2A0C               	incf	___lwmod@counter,f,c
   681  0009BC                     l922:
   682  0009BC  AE0B               	btfss	___lwmod@divisor+1,7,c
   683  0009BE  D7FA               	goto	l920
   684  0009C0                     l924:
   685  0009C0  500A               	movf	___lwmod@divisor,w,c
   686  0009C2  5C08               	subwf	___lwmod@dividend,w,c
   687  0009C4  500B               	movf	___lwmod@divisor+1,w,c
   688  0009C6  5809               	subwfb	___lwmod@dividend+1,w,c
   689  0009C8  A0D8               	btfss	status,0,c
   690  0009CA  D004               	goto	l928
   691  0009CC  500A               	movf	___lwmod@divisor,w,c
   692  0009CE  5E08               	subwf	___lwmod@dividend,f,c
   693  0009D0  500B               	movf	___lwmod@divisor+1,w,c
   694  0009D2  5A09               	subwfb	___lwmod@dividend+1,f,c
   695  0009D4                     l928:
   696  0009D4  90D8               	bcf	status,0,c
   697  0009D6  320B               	rrcf	___lwmod@divisor+1,f,c
   698  0009D8  320A               	rrcf	___lwmod@divisor,f,c
   699  0009DA  2E0C               	decfsz	___lwmod@counter,f,c
   700  0009DC  D7F1               	goto	l924
   701  0009DE                     l737:
   702  0009DE  C008  F008         	movff	___lwmod@dividend,?___lwmod
   703  0009E2  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   704  0009E6  0012               	return	
   705  0009E8  FFFF               	dw	65535	; errata NOP
   706  0009EA                     __end_of___lwmod:
   707                           	opt stack 0
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           prodh	equ	0xFF4
   713                           prodl	equ	0xFF3
   714                           indf2	equ	0xFDF
   715                           postinc2	equ	0xFDE
   716                           postdec2	equ	0xFDD
   717                           fsr2h	equ	0xFDA
   718                           fsr2l	equ	0xFD9
   719                           status	equ	0xFD8
   720                           
   721 ;; *************** function ___lwdiv *****************
   722 ;; Defined at:
   723 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/lwdiv.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;  dividend        2    0[COMRAM] unsigned int 
   726 ;;  divisor         2    2[COMRAM] unsigned int 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  quotient        2    4[COMRAM] unsigned int 
   729 ;;  counter         1    6[COMRAM] unsigned char 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  2    0[COMRAM] unsigned int 
   732 ;; Registers used:
   733 ;;		wreg, status,2, status,0
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   739 ;;      Params:         4       0       0       0       0       0       0
   740 ;;      Locals:         3       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0
   742 ;;      Totals:         7       0       0       0       0       0       0
   743 ;;Total ram usage:        7 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		_sprintf
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text3
   753  00094E                     __ptext3:
   754                           	opt stack 0
   755  00094E                     ___lwdiv:
   756                           	opt stack 29
   757                           
   758                           ;incstack = 0
   759  00094E  FFFF               	dw	65535
   760  000950  0E00               	movlw	0
   761  000952  6E06               	movwf	___lwdiv@quotient+1,c
   762  000954  0E00               	movlw	0
   763  000956  6E05               	movwf	___lwdiv@quotient,c
   764  000958  5004               	movf	___lwdiv@divisor+1,w,c
   765  00095A  1003               	iorwf	___lwdiv@divisor,w,c
   766  00095C  B4D8               	btfsc	status,2,c
   767  00095E  D01C               	goto	l727
   768  000960  0E01               	movlw	1
   769  000962  6E07               	movwf	___lwdiv@counter,c
   770  000964  D004               	goto	l902
   771  000966                     l900:
   772  000966  90D8               	bcf	status,0,c
   773  000968  3603               	rlcf	___lwdiv@divisor,f,c
   774  00096A  3604               	rlcf	___lwdiv@divisor+1,f,c
   775  00096C  2A07               	incf	___lwdiv@counter,f,c
   776  00096E                     l902:
   777  00096E  AE04               	btfss	___lwdiv@divisor+1,7,c
   778  000970  D7FA               	goto	l900
   779  000972                     l904:
   780  000972  90D8               	bcf	status,0,c
   781  000974  3605               	rlcf	___lwdiv@quotient,f,c
   782  000976  3606               	rlcf	___lwdiv@quotient+1,f,c
   783  000978  5003               	movf	___lwdiv@divisor,w,c
   784  00097A  5C01               	subwf	___lwdiv@dividend,w,c
   785  00097C  5004               	movf	___lwdiv@divisor+1,w,c
   786  00097E  5802               	subwfb	___lwdiv@dividend+1,w,c
   787  000980  A0D8               	btfss	status,0,c
   788  000982  D005               	goto	l912
   789  000984  5003               	movf	___lwdiv@divisor,w,c
   790  000986  5E01               	subwf	___lwdiv@dividend,f,c
   791  000988  5004               	movf	___lwdiv@divisor+1,w,c
   792  00098A  5A02               	subwfb	___lwdiv@dividend+1,f,c
   793  00098C  8005               	bsf	___lwdiv@quotient,0,c
   794  00098E                     l912:
   795  00098E  90D8               	bcf	status,0,c
   796  000990  3204               	rrcf	___lwdiv@divisor+1,f,c
   797  000992  3203               	rrcf	___lwdiv@divisor,f,c
   798  000994  2E07               	decfsz	___lwdiv@counter,f,c
   799  000996  D7ED               	goto	l904
   800  000998                     l727:
   801  000998  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   802  00099C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   803  0009A0  0012               	return	
   804  0009A2  FFFF               	dw	65535	; errata NOP
   805  0009A4                     __end_of___lwdiv:
   806                           	opt stack 0
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           prodh	equ	0xFF4
   812                           prodl	equ	0xFF3
   813                           indf2	equ	0xFDF
   814                           postinc2	equ	0xFDE
   815                           postdec2	equ	0xFDD
   816                           fsr2h	equ	0xFDA
   817                           fsr2l	equ	0xFD9
   818                           status	equ	0xFD8
   819                           
   820 ;; *************** function _lcdan_print_string *****************
   821 ;; Defined at:
   822 ;;		line 14 in file "lcdan/lcdan_aux.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;  p               2   12[COMRAM] PTR const unsigned char 
   825 ;;		 -> main@buff(10), 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;		None               void
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   837 ;;      Params:         2       0       0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0
   840 ;;      Totals:         2       0       0       0       0       0       0
   841 ;;Total ram usage:        2 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    4
   844 ;; This function calls:
   845 ;;		_lcdan_write_data
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text4
   852  000A1E                     __ptext4:
   853                           	opt stack 0
   854  000A1E                     _lcdan_print_string:
   855                           	opt stack 26
   856                           
   857                           ;incstack = 0
   858  000A1E  FFFF               	dw	65535
   859                           
   860                           ;lcdan_aux.c: 16: while (*p)
   861  000A20  D009               	goto	l1032
   862  000A22                     l1028:
   863                           
   864                           ;lcdan_aux.c: 17: {
   865                           ;lcdan_aux.c: 18: lcdan_write_data(*p);
   866  000A22  C00D  FFD9         	movff	lcdan_print_string@p,fsr2l
   867  000A26  C00E  FFDA         	movff	lcdan_print_string@p+1,fsr2h
   868  000A2A  50DF               	movf	indf2,w,c
   869  000A2C  EC46  F005         	call	_lcdan_write_data
   870                           
   871                           ;lcdan_aux.c: 19: p++;
   872  000A30  4A0D               	infsnz	lcdan_print_string@p,f,c
   873  000A32  2A0E               	incf	lcdan_print_string@p+1,f,c
   874  000A34                     l1032:
   875  000A34  C00D  FFD9         	movff	lcdan_print_string@p,fsr2l
   876  000A38  C00E  FFDA         	movff	lcdan_print_string@p+1,fsr2h
   877  000A3C  50DF               	movf	indf2,w,c
   878  000A3E  B4D8               	btfsc	status,2,c
   879  000A40  0012               	return	
   880  000A42  FFFF               	dw	65535	; assembler added errata NOP
   881  000A44  D7EE               	goto	l1028
   882  000A46  FFFF               	dw	65535	; errata NOP
   883  000A48                     __end_of_lcdan_print_string:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           indf2	equ	0xFDF
   892                           postinc2	equ	0xFDE
   893                           postdec2	equ	0xFDD
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _lcdan_write_data *****************
   899 ;; Defined at:
   900 ;;		line 293 in file "lcdan/lcdan.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  data            1    wreg     unsigned char 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  data            1   11[COMRAM] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;		None               void
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   914 ;;      Params:         0       0       0       0       0       0       0
   915 ;;      Locals:         1       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0
   917 ;;      Totals:         1       0       0       0       0       0       0
   918 ;;Total ram usage:        1 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    3
   921 ;; This function calls:
   922 ;;		_lcdan_set_and_latch_8bits
   923 ;;		_lcdan_set_data_mode
   924 ;;		_lcdan_set_write_mode
   925 ;;		_lcdan_test_busy
   926 ;; This function is called by:
   927 ;;		_lcdan_print_string
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text5
   932  000A8C                     __ptext5:
   933                           	opt stack 0
   934  000A8C                     _lcdan_write_data:
   935                           	opt stack 26
   936                           
   937                           ;incstack = 0
   938  000A8C  FFFF               	dw	65535
   939                           
   940                           ;lcdan_write_data@data stored from wreg
   941  000A8E  6E0C               	movwf	lcdan_write_data@data,c
   942                           
   943                           ;lcdan.c: 295: lcdan_test_busy();
   944  000A90  EC78  F004         	call	_lcdan_test_busy	;wreg free
   945                           
   946                           ;lcdan.c: 296: lcdan_set_data_mode();
   947  000A94  EC88  F005         	call	_lcdan_set_data_mode	;wreg free
   948                           
   949                           ;lcdan.c: 297: lcdan_set_write_mode();
   950  000A98  EC94  F005         	call	_lcdan_set_write_mode	;wreg free
   951                           
   952                           ;lcdan.c: 298: lcdan_set_and_latch_8bits(data);
   953  000A9C  500C               	movf	lcdan_write_data@data,w,c
   954  000A9E  EC60  F005         	call	_lcdan_set_and_latch_8bits
   955  000AA2  0012               	return	
   956  000AA4  FFFF               	dw	65535	; errata NOP
   957  000AA6                     __end_of_lcdan_write_data:
   958                           	opt stack 0
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           prodh	equ	0xFF4
   964                           prodl	equ	0xFF3
   965                           indf2	equ	0xFDF
   966                           postinc2	equ	0xFDE
   967                           postdec2	equ	0xFDD
   968                           fsr2h	equ	0xFDA
   969                           fsr2l	equ	0xFD9
   970                           status	equ	0xFD8
   971                           
   972 ;; *************** function _lcdan_set_data_mode *****************
   973 ;; Defined at:
   974 ;;		line 110 in file "lcdan/lcdan.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;		None               void
   981 ;; Registers used:
   982 ;;		status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   988 ;;      Params:         0       0       0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0
   991 ;;      Totals:         0       0       0       0       0       0       0
   992 ;;Total ram usage:        0 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_lcdan_write_data
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text6
  1002  000B10                     __ptext6:
  1003                           	opt stack 0
  1004  000B10                     _lcdan_set_data_mode:
  1005                           	opt stack 28
  1006                           
  1007                           ;incstack = 0
  1008  000B10  FFFF               	dw	65535
  1009                           
  1010                           ;lcdan.c: 115: do{LATD |= (0x01<<1);}while(0);
  1011  000B12  828C               	bsf	3980,1,c	;volatile
  1012  000B14  0012               	return	
  1013  000B16  FFFF               	dw	65535	; errata NOP
  1014  000B18                     __end_of_lcdan_set_data_mode:
  1015                           	opt stack 0
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           prodh	equ	0xFF4
  1021                           prodl	equ	0xFF3
  1022                           indf2	equ	0xFDF
  1023                           postinc2	equ	0xFDE
  1024                           postdec2	equ	0xFDD
  1025                           fsr2h	equ	0xFDA
  1026                           fsr2l	equ	0xFD9
  1027                           status	equ	0xFD8
  1028                           
  1029 ;; *************** function _lcdan_init *****************
  1030 ;; Defined at:
  1031 ;;		line 301 in file "lcdan/lcdan.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;		None               void
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, status,0, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1045 ;;      Params:         0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0
  1047 ;;      Temps:          1       0       0       0       0       0       0
  1048 ;;      Totals:         1       0       0       0       0       0       0
  1049 ;;Total ram usage:        1 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    4
  1052 ;; This function calls:
  1053 ;;		_lcdan_set_and_latch_4bits
  1054 ;;		_lcdan_set_command_mode
  1055 ;;		_lcdan_set_controlpins_and_datapins_outputs
  1056 ;;		_lcdan_set_write_mode
  1057 ;;		_lcdan_strobe_enable
  1058 ;;		_lcdan_write_cmd
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text7
  1065  00077E                     __ptext7:
  1066                           	opt stack 0
  1067  00077E                     _lcdan_init:
  1068                           	opt stack 26
  1069                           
  1070                           ;incstack = 0
  1071  00077E  FFFF               	dw	65535
  1072                           
  1073                           ;lcdan.c: 303: lcdan_set_controlpins_and_datapins_outputs();
  1074  000780  EC6B  F005         	call	_lcdan_set_controlpins_and_datapins_outputs	;wreg free
  1075                           
  1076                           ;lcdan.c: 304: do{_delay((unsigned long)((10)*(20000000/4000.0)));_delay((unsigned long)
      +                          ((10)*(20000000/4000.0)));_delay((unsigned long)((10)*(20000000/4000.0)));_delay((unsign
      +                          ed long)((10)*(20000000/4000.0)));}while(0);
  1077  000784  0E31               	movlw	49
  1078  000786  6E0D               	movwf	??_lcdan_init& (0+255),c
  1079  000788  0EBB               	movlw	187
  1080  00078A                     u347:
  1081  00078A  2EE8               	decfsz	wreg,f,c
  1082  00078C  D7FE               	goto	u347
  1083  00078E  2E0D               	decfsz	??_lcdan_init& (0+255),f,c
  1084  000790  D7FC               	goto	u347
  1085  000792  0E31               	movlw	49
  1086  000794  6E0D               	movwf	??_lcdan_init& (0+255),c
  1087  000796  0EBB               	movlw	187
  1088  000798                     u357:
  1089  000798  2EE8               	decfsz	wreg,f,c
  1090  00079A  D7FE               	goto	u357
  1091  00079C  2E0D               	decfsz	??_lcdan_init& (0+255),f,c
  1092  00079E  D7FC               	goto	u357
  1093  0007A0  0E31               	movlw	49
  1094  0007A2  6E0D               	movwf	??_lcdan_init& (0+255),c
  1095  0007A4  0EBB               	movlw	187
  1096  0007A6                     u367:
  1097  0007A6  2EE8               	decfsz	wreg,f,c
  1098  0007A8  D7FE               	goto	u367
  1099  0007AA  2E0D               	decfsz	??_lcdan_init& (0+255),f,c
  1100  0007AC  D7FC               	goto	u367
  1101  0007AE  0E31               	movlw	49
  1102  0007B0  6E0D               	movwf	??_lcdan_init& (0+255),c
  1103  0007B2  0EBB               	movlw	187
  1104  0007B4                     u377:
  1105  0007B4  2EE8               	decfsz	wreg,f,c
  1106  0007B6  D7FE               	goto	u377
  1107  0007B8  2E0D               	decfsz	??_lcdan_init& (0+255),f,c
  1108  0007BA  D7FC               	goto	u377
  1109                           
  1110                           ;lcdan.c: 305: lcdan_set_command_mode();
  1111  0007BC  EC90  F005         	call	_lcdan_set_command_mode	;wreg free
  1112                           
  1113                           ;lcdan.c: 306: lcdan_set_write_mode();
  1114  0007C0  EC94  F005         	call	_lcdan_set_write_mode	;wreg free
  1115                           
  1116                           ;lcdan.c: 307: lcdan_set_and_latch_4bits(0x30);
  1117  0007C4  0E30               	movlw	48
  1118  0007C6  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1119                           
  1120                           ;lcdan.c: 308: _delay((unsigned long)((6)*(20000000/4000.0)));
  1121  0007CA  0E1E               	movlw	30
  1122  0007CC  6E0D               	movwf	??_lcdan_init& (0+255),c
  1123  0007CE  0E3C               	movlw	60
  1124  0007D0                     u387:
  1125  0007D0  2EE8               	decfsz	wreg,f,c
  1126  0007D2  D7FE               	goto	u387
  1127  0007D4  2E0D               	decfsz	??_lcdan_init& (0+255),f,c
  1128  0007D6  D7FC               	goto	u387
  1129  0007D8  D000               	nop2	
  1130                           
  1131                           ;lcdan.c: 309: lcdan_set_and_latch_4bits(0x30);
  1132  0007DA  0E30               	movlw	48
  1133  0007DC  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1134                           
  1135                           ;lcdan.c: 310: _delay((unsigned long)((120)*(20000000/4000000.0)));
  1136  0007E0  0E96               	movlw	150
  1137  0007E2                     u397:
  1138  0007E2  2EE8               	decfsz	wreg,f,c
  1139  0007E4  D7FE               	goto	u397
  1140                           
  1141                           ;lcdan.c: 311: lcdan_set_and_latch_4bits(0x30);
  1142  0007E6  0E30               	movlw	48
  1143  0007E8  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1144                           
  1145                           ;lcdan.c: 313: lcdan_set_and_latch_4bits(0x20);
  1146  0007EC  0E20               	movlw	32
  1147  0007EE  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1148                           
  1149                           ;lcdan.c: 314: lcdan_strobe_enable();
  1150  0007F2  EC38  F005         	call	_lcdan_strobe_enable	;wreg free
  1151                           
  1152                           ;lcdan.c: 316: lcdan_write_cmd(0x28);
  1153  0007F6  0E28               	movlw	40
  1154  0007F8  EC53  F005         	call	_lcdan_write_cmd
  1155                           
  1156                           ;lcdan.c: 317: lcdan_write_cmd((0x08));
  1157  0007FC  0E08               	movlw	8
  1158  0007FE  EC53  F005         	call	_lcdan_write_cmd
  1159                           
  1160                           ;lcdan.c: 318: lcdan_write_cmd((0x01));
  1161  000802  0E01               	movlw	1
  1162  000804  EC53  F005         	call	_lcdan_write_cmd
  1163                           
  1164                           ;lcdan.c: 319: lcdan_write_cmd(0x06);
  1165  000808  0E06               	movlw	6
  1166  00080A  EC53  F005         	call	_lcdan_write_cmd
  1167                           
  1168                           ;lcdan.c: 321: lcdan_write_cmd((0x0C));
  1169  00080E  0E0C               	movlw	12
  1170  000810  EC53  F005         	call	_lcdan_write_cmd
  1171  000814  0012               	return	
  1172  000816  FFFF               	dw	65535	; errata NOP
  1173  000818                     __end_of_lcdan_init:
  1174                           	opt stack 0
  1175                           tblptru	equ	0xFF8
  1176                           tblptrh	equ	0xFF7
  1177                           tblptrl	equ	0xFF6
  1178                           tablat	equ	0xFF5
  1179                           prodh	equ	0xFF4
  1180                           prodl	equ	0xFF3
  1181                           wreg	equ	0xFE8
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           fsr2h	equ	0xFDA
  1186                           fsr2l	equ	0xFD9
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function _lcdan_write_cmd *****************
  1190 ;; Defined at:
  1191 ;;		line 285 in file "lcdan/lcdan.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  cmd             1    wreg     unsigned char 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  cmd             1   11[COMRAM] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;		None               void
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1205 ;;      Params:         0       0       0       0       0       0       0
  1206 ;;      Locals:         1       0       0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0
  1208 ;;      Totals:         1       0       0       0       0       0       0
  1209 ;;Total ram usage:        1 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    3
  1212 ;; This function calls:
  1213 ;;		_lcdan_set_and_latch_8bits
  1214 ;;		_lcdan_set_command_mode
  1215 ;;		_lcdan_set_write_mode
  1216 ;;		_lcdan_test_busy
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;;		_lcdan_init
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text8
  1224  000AA6                     __ptext8:
  1225                           	opt stack 0
  1226  000AA6                     _lcdan_write_cmd:
  1227                           	opt stack 27
  1228                           
  1229                           ;incstack = 0
  1230  000AA6  FFFF               	dw	65535
  1231                           
  1232                           ;lcdan_write_cmd@cmd stored from wreg
  1233  000AA8  6E0C               	movwf	lcdan_write_cmd@cmd,c
  1234                           
  1235                           ;lcdan.c: 287: lcdan_test_busy();
  1236  000AAA  EC78  F004         	call	_lcdan_test_busy	;wreg free
  1237                           
  1238                           ;lcdan.c: 288: lcdan_set_command_mode();
  1239  000AAE  EC90  F005         	call	_lcdan_set_command_mode	;wreg free
  1240                           
  1241                           ;lcdan.c: 289: lcdan_set_write_mode();
  1242  000AB2  EC94  F005         	call	_lcdan_set_write_mode	;wreg free
  1243                           
  1244                           ;lcdan.c: 290: lcdan_set_and_latch_8bits(cmd);
  1245  000AB6  500C               	movf	lcdan_write_cmd@cmd,w,c
  1246  000AB8  EC60  F005         	call	_lcdan_set_and_latch_8bits
  1247  000ABC  0012               	return	
  1248  000ABE  FFFF               	dw	65535	; errata NOP
  1249  000AC0                     __end_of_lcdan_write_cmd:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           prodh	equ	0xFF4
  1256                           prodl	equ	0xFF3
  1257                           wreg	equ	0xFE8
  1258                           indf2	equ	0xFDF
  1259                           postinc2	equ	0xFDE
  1260                           postdec2	equ	0xFDD
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _lcdan_test_busy *****************
  1266 ;; Defined at:
  1267 ;;		line 238 in file "lcdan/lcdan.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  i               1   10[COMRAM] unsigned char 
  1272 ;;  busy_addr       1    9[COMRAM] unsigned char 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      unsigned char 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2, status,0, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:         0       0       0       0       0       0       0
  1283 ;;      Locals:         2       0       0       0       0       0       0
  1284 ;;      Temps:          1       0       0       0       0       0       0
  1285 ;;      Totals:         3       0       0       0       0       0       0
  1286 ;;Total ram usage:        3 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    1
  1289 ;; This function calls:
  1290 ;;		_lcdan_get_data
  1291 ;;		_lcdan_set_command_mode
  1292 ;;		_lcdan_set_datapins_inputs
  1293 ;;		_lcdan_set_datapins_outputs
  1294 ;;		_lcdan_set_read_mode
  1295 ;; This function is called by:
  1296 ;;		_lcdan_write_cmd
  1297 ;;		_lcdan_write_data
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text9
  1302  0008F0                     __ptext9:
  1303                           	opt stack 0
  1304  0008F0                     _lcdan_test_busy:
  1305                           	opt stack 28
  1306                           
  1307                           ;incstack = 0
  1308  0008F0  FFFF               	dw	65535
  1309                           
  1310                           ;lcdan.c: 240: uint8_t busy_addr, i;
  1311                           ;lcdan.c: 242: lcdan_set_datapins_inputs();
  1312  0008F2  EC7C  F005         	call	_lcdan_set_datapins_inputs	;wreg free
  1313                           
  1314                           ;lcdan.c: 243: lcdan_set_command_mode();
  1315  0008F6  EC90  F005         	call	_lcdan_set_command_mode	;wreg free
  1316                           
  1317                           ;lcdan.c: 244: lcdan_set_read_mode();
  1318  0008FA  EC8C  F005         	call	_lcdan_set_read_mode	;wreg free
  1319                           
  1320                           ;lcdan.c: 246: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  1321  0008FE  F000               	nop	
  1322  000900  D000               	nop2		;2 cycle nop
  1323  000902  D000               	nop2		;2 cycle nop
  1324  000904                     l850:
  1325                           
  1326                           ;lcdan.c: 250: {
  1327                           ;lcdan.c: 251: for (i = 0; i < 2; i++)
  1328  000904  0E00               	movlw	0
  1329  000906  6E0B               	movwf	lcdan_test_busy@i,c
  1330  000908  D019               	goto	L3
  1331  00090A                     l856:
  1332  00090A  868C               	bsf	3980,3,c	;volatile
  1333                           
  1334                           ;lcdan.c: 258: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  1335  00090C  F000               	nop	
  1336  00090E  D000               	nop2		;2 cycle nop
  1337  000910  D000               	nop2		;2 cycle nop
  1338                           
  1339                           ;lcdan.c: 260: if (i == 0)
  1340  000912  660B               	tstfsz	lcdan_test_busy@i,c
  1341  000914  D005               	goto	l864
  1342                           
  1343                           ;lcdan.c: 261: {
  1344                           ;lcdan.c: 262: busy_addr = lcdan_get_data() & 0xF0;
  1345  000916  EC0C  F004         	call	_lcdan_get_data	;wreg free
  1346  00091A  0BF0               	andlw	240
  1347  00091C  6E0A               	movwf	lcdan_test_busy@busy_addr,c
  1348                           
  1349                           ;lcdan.c: 263: }
  1350  00091E  D006               	goto	l866
  1351  000920                     l864:
  1352                           
  1353                           ;lcdan.c: 264: else
  1354                           ;lcdan.c: 265: {
  1355                           ;lcdan.c: 266: busy_addr |= (lcdan_get_data() >> 4);
  1356  000920  EC0C  F004         	call	_lcdan_get_data	;wreg free
  1357  000924  6E09               	movwf	??_lcdan_test_busy& (0+255),c
  1358  000926  3809               	swapf	??_lcdan_test_busy,w,c
  1359  000928  0B0F               	andlw	15
  1360  00092A  120A               	iorwf	lcdan_test_busy@busy_addr,f,c
  1361  00092C                     l866:
  1362  00092C  F000               	nop	
  1363  00092E  D000               	nop2		;2 cycle nop
  1364  000930  D000               	nop2		;2 cycle nop
  1365                           
  1366                           ;lcdan.c: 273: do{LATD &= (~(0x01<<3));}while(0);
  1367  000932  968C               	bcf	3980,3,c	;volatile
  1368                           
  1369                           ;lcdan.c: 275: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  1370  000934  F000               	nop	
  1371  000936  D000               	nop2		;2 cycle nop
  1372  000938  D000               	nop2		;2 cycle nop
  1373  00093A  2A0B               	incf	lcdan_test_busy@i,f,c
  1374  00093C                     L3:
  1375  00093C  0E01               	movlw	1
  1376  00093E  640B               	cpfsgt	lcdan_test_busy@i,c
  1377  000940  D7E4               	goto	l856
  1378                           
  1379                           ;lcdan.c: 276: }
  1380                           ;lcdan.c: 278: }
  1381                           ;lcdan.c: 279: while (busy_addr & 0x80);
  1382  000942  BE0A               	btfsc	lcdan_test_busy@busy_addr,7,c
  1383  000944  D7DF               	goto	l850
  1384                           
  1385                           ;lcdan.c: 281: lcdan_set_datapins_outputs();
  1386  000946  EC75  F005         	call	_lcdan_set_datapins_outputs	;wreg free
  1387                           
  1388                           ;lcdan.c: 282: return busy_addr;
  1389                           ;	Return value of _lcdan_test_busy is never used
  1390  00094A  0012               	return	
  1391  00094C  FFFF               	dw	65535	; errata NOP
  1392  00094E                     __end_of_lcdan_test_busy:
  1393                           	opt stack 0
  1394                           tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           prodh	equ	0xFF4
  1399                           prodl	equ	0xFF3
  1400                           wreg	equ	0xFE8
  1401                           indf2	equ	0xFDF
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function _lcdan_set_read_mode *****************
  1409 ;; Defined at:
  1410 ;;		line 130 in file "lcdan/lcdan.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;		None               void
  1417 ;; Registers used:
  1418 ;;		status,2, status,0
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1424 ;;      Params:         0       0       0       0       0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0
  1427 ;;      Totals:         0       0       0       0       0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_lcdan_test_busy
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text10
  1438  000B18                     __ptext10:
  1439                           	opt stack 0
  1440  000B18                     _lcdan_set_read_mode:
  1441                           	opt stack 28
  1442                           
  1443                           ;incstack = 0
  1444  000B18  FFFF               	dw	65535
  1445                           
  1446                           ;lcdan.c: 135: do{LATD |= (0x01<<2);}while(0);
  1447  000B1A  848C               	bsf	3980,2,c	;volatile
  1448  000B1C  0012               	return	
  1449  000B1E  FFFF               	dw	65535	; errata NOP
  1450  000B20                     __end_of_lcdan_set_read_mode:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           prodh	equ	0xFF4
  1457                           prodl	equ	0xFF3
  1458                           wreg	equ	0xFE8
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _lcdan_set_datapins_outputs *****************
  1467 ;; Defined at:
  1468 ;;		line 87 in file "lcdan/lcdan.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;		None
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;		None
  1473 ;; Return value:  Size  Location     Type
  1474 ;;		None               void
  1475 ;; Registers used:
  1476 ;;		status,2, status,0
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1482 ;;      Params:         0       0       0       0       0       0       0
  1483 ;;      Locals:         0       0       0       0       0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0
  1485 ;;      Totals:         0       0       0       0       0       0       0
  1486 ;;Total ram usage:        0 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; This function calls:
  1489 ;;		Nothing
  1490 ;; This function is called by:
  1491 ;;		_lcdan_test_busy
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text11
  1496  000AEA                     __ptext11:
  1497                           	opt stack 0
  1498  000AEA                     _lcdan_set_datapins_outputs:
  1499                           	opt stack 28
  1500                           
  1501                           ;incstack = 0
  1502  000AEA  FFFF               	dw	65535
  1503                           
  1504                           ;lcdan.c: 92: do{ TRISD &= (~(1<<4)); }while(0);
  1505  000AEC  9895               	bcf	3989,4,c	;volatile
  1506                           
  1507                           ;lcdan.c: 93: do{ TRISD &= (~(1<<5)); }while(0);
  1508  000AEE  9A95               	bcf	3989,5,c	;volatile
  1509                           
  1510                           ;lcdan.c: 94: do{ TRISD &= (~(1<<6)); }while(0);
  1511  000AF0  9C95               	bcf	3989,6,c	;volatile
  1512                           
  1513                           ;lcdan.c: 95: do{ TRISD &= (~(1<<7)); }while(0);
  1514  000AF2  9E95               	bcf	3989,7,c	;volatile
  1515  000AF4  0012               	return	
  1516  000AF6  FFFF               	dw	65535	; errata NOP
  1517  000AF8                     __end_of_lcdan_set_datapins_outputs:
  1518                           	opt stack 0
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           prodh	equ	0xFF4
  1524                           prodl	equ	0xFF3
  1525                           wreg	equ	0xFE8
  1526                           indf2	equ	0xFDF
  1527                           postinc2	equ	0xFDE
  1528                           postdec2	equ	0xFDD
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _lcdan_set_datapins_inputs *****************
  1534 ;; Defined at:
  1535 ;;		line 75 in file "lcdan/lcdan.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		status,2, status,0
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_lcdan_test_busy
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text12
  1563  000AF8                     __ptext12:
  1564                           	opt stack 0
  1565  000AF8                     _lcdan_set_datapins_inputs:
  1566                           	opt stack 28
  1567                           
  1568                           ;incstack = 0
  1569  000AF8  FFFF               	dw	65535
  1570                           
  1571                           ;lcdan.c: 80: do{ TRISD |= (1<<4); }while(0);
  1572  000AFA  8895               	bsf	3989,4,c	;volatile
  1573                           
  1574                           ;lcdan.c: 81: do{ TRISD |= (1<<5); }while(0);
  1575  000AFC  8A95               	bsf	3989,5,c	;volatile
  1576                           
  1577                           ;lcdan.c: 82: do{ TRISD |= (1<<6); }while(0);
  1578  000AFE  8C95               	bsf	3989,6,c	;volatile
  1579                           
  1580                           ;lcdan.c: 83: do{ TRISD |= (1<<7); }while(0);
  1581  000B00  8E95               	bsf	3989,7,c	;volatile
  1582  000B02  0012               	return	
  1583  000B04  FFFF               	dw	65535	; errata NOP
  1584  000B06                     __end_of_lcdan_set_datapins_inputs:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           wreg	equ	0xFE8
  1593                           indf2	equ	0xFDF
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _lcdan_set_command_mode *****************
  1601 ;; Defined at:
  1602 ;;		line 100 in file "lcdan/lcdan.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;		None               void
  1609 ;; Registers used:
  1610 ;;		status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1616 ;;      Params:         0       0       0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_lcdan_test_busy
  1626 ;;		_lcdan_write_cmd
  1627 ;;		_lcdan_init
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text13
  1632  000B20                     __ptext13:
  1633                           	opt stack 0
  1634  000B20                     _lcdan_set_command_mode:
  1635                           	opt stack 28
  1636                           
  1637                           ;incstack = 0
  1638  000B20  FFFF               	dw	65535
  1639                           
  1640                           ;lcdan.c: 105: do{LATD &= (~(0x01<<1));}while(0);
  1641  000B22  928C               	bcf	3980,1,c	;volatile
  1642  000B24  0012               	return	
  1643  000B26  FFFF               	dw	65535	; errata NOP
  1644  000B28                     __end_of_lcdan_set_command_mode:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           wreg	equ	0xFE8
  1653                           indf2	equ	0xFDF
  1654                           postinc2	equ	0xFDE
  1655                           postdec2	equ	0xFDD
  1656                           fsr2h	equ	0xFDA
  1657                           fsr2l	equ	0xFD9
  1658                           status	equ	0xFD8
  1659                           
  1660 ;; *************** function _lcdan_get_data *****************
  1661 ;; Defined at:
  1662 ;;		line 226 in file "lcdan/lcdan.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      unsigned char 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1676 ;;      Params:         0       0       0       0       0       0       0
  1677 ;;      Locals:         0       0       0       0       0       0       0
  1678 ;;      Temps:          8       0       0       0       0       0       0
  1679 ;;      Totals:         8       0       0       0       0       0       0
  1680 ;;Total ram usage:        8 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_lcdan_test_busy
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text14
  1690  000818                     __ptext14:
  1691                           	opt stack 0
  1692  000818                     _lcdan_get_data:
  1693                           	opt stack 28
  1694                           
  1695                           ;incstack = 0
  1696  000818  FFFF               	dw	65535
  1697                           
  1698                           ;lcdan.c: 231: return (((PORTD & (1<<7))>>7) << 7) |
  1699                           ;lcdan.c: 232: (((PORTD & (1<<6))>>6) << 6) |
  1700                           ;lcdan.c: 233: (((PORTD & (1<<5))>>5) << 5) |
  1701                           ;lcdan.c: 234: (((PORTD & (1<<4))>>4) << 4);
  1702  00081A  CF83 F001          	movff	3971,??_lcdan_get_data	;volatile
  1703  00081E  3A01               	swapf	??_lcdan_get_data,f,c
  1704  000820  0E0F               	movlw	15
  1705  000822  1601               	andwf	??_lcdan_get_data,f,c
  1706  000824  0E01               	movlw	1
  1707  000826  1601               	andwf	??_lcdan_get_data,f,c
  1708  000828  3A01               	swapf	??_lcdan_get_data,f,c
  1709  00082A  0EF0               	movlw	240
  1710  00082C  1601               	andwf	??_lcdan_get_data,f,c
  1711  00082E  CF83 F002          	movff	3971,??_lcdan_get_data+1	;volatile
  1712  000832  0E05               	movlw	5
  1713  000834  6E03               	movwf	(??_lcdan_get_data+2)& (0+255),c
  1714  000836                     u55:
  1715  000836  90D8               	bcf	status,0,c
  1716  000838  3202               	rrcf	??_lcdan_get_data+1,f,c
  1717  00083A  2E03               	decfsz	(??_lcdan_get_data+2)& (0+255),f,c
  1718  00083C  D7FC               	goto	u55
  1719  00083E  0E01               	movlw	1
  1720  000840  1602               	andwf	??_lcdan_get_data+1,f,c
  1721  000842  0E05               	movlw	5
  1722  000844  6E04               	movwf	(??_lcdan_get_data+3)& (0+255),c
  1723  000846                     u65:
  1724  000846  90D8               	bcf	status,0,c
  1725  000848  3602               	rlcf	??_lcdan_get_data+1,f,c
  1726  00084A  2E04               	decfsz	(??_lcdan_get_data+3)& (0+255),f,c
  1727  00084C  D7FC               	goto	u65
  1728  00084E  CF83 F005          	movff	3971,??_lcdan_get_data+4	;volatile
  1729  000852  0E06               	movlw	6
  1730  000854  6E06               	movwf	(??_lcdan_get_data+5)& (0+255),c
  1731  000856                     u75:
  1732  000856  90D8               	bcf	status,0,c
  1733  000858  3205               	rrcf	??_lcdan_get_data+4,f,c
  1734  00085A  2E06               	decfsz	(??_lcdan_get_data+5)& (0+255),f,c
  1735  00085C  D7FC               	goto	u75
  1736  00085E  0E01               	movlw	1
  1737  000860  1605               	andwf	??_lcdan_get_data+4,f,c
  1738  000862  0E06               	movlw	6
  1739  000864  6E07               	movwf	(??_lcdan_get_data+6)& (0+255),c
  1740  000866                     u85:
  1741  000866  90D8               	bcf	status,0,c
  1742  000868  3605               	rlcf	??_lcdan_get_data+4,f,c
  1743  00086A  2E07               	decfsz	(??_lcdan_get_data+6)& (0+255),f,c
  1744  00086C  D7FC               	goto	u85
  1745  00086E  6A08               	clrf	(??_lcdan_get_data+7)& (0+255),c
  1746  000870  AE83               	btfss	3971,7,c	;volatile
  1747  000872  D001               	bra	u95
  1748  000874  2A08               	incf	(??_lcdan_get_data+7)& (0+255),f,c
  1749  000876                     u95:
  1750  000876  0E01               	movlw	1
  1751  000878  1608               	andwf	??_lcdan_get_data+7,f,c
  1752  00087A  0E00               	movlw	0
  1753  00087C  B008               	btfsc	??_lcdan_get_data+7,0,c
  1754  00087E  0E80               	movlw	128
  1755  000880  6E08               	movwf	??_lcdan_get_data+7,c
  1756  000882  5008               	movf	??_lcdan_get_data+7,w,c
  1757  000884  1005               	iorwf	??_lcdan_get_data+4,w,c
  1758  000886  1002               	iorwf	??_lcdan_get_data+1,w,c
  1759  000888  1001               	iorwf	??_lcdan_get_data,w,c
  1760  00088A  0012               	return	
  1761  00088C  FFFF               	dw	65535	; errata NOP
  1762  00088E                     __end_of_lcdan_get_data:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           prodh	equ	0xFF4
  1769                           prodl	equ	0xFF3
  1770                           wreg	equ	0xFE8
  1771                           indf2	equ	0xFDF
  1772                           postinc2	equ	0xFDE
  1773                           postdec2	equ	0xFDD
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _lcdan_set_write_mode *****************
  1779 ;; Defined at:
  1780 ;;		line 120 in file "lcdan/lcdan.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_lcdan_write_cmd
  1804 ;;		_lcdan_write_data
  1805 ;;		_lcdan_init
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text15
  1810  000B28                     __ptext15:
  1811                           	opt stack 0
  1812  000B28                     _lcdan_set_write_mode:
  1813                           	opt stack 29
  1814                           
  1815                           ;incstack = 0
  1816  000B28  FFFF               	dw	65535
  1817                           
  1818                           ;lcdan.c: 125: do{LATD &= (~(0x01<<2));}while(0);
  1819  000B2A  948C               	bcf	3980,2,c	;volatile
  1820  000B2C  0012               	return	
  1821  000B2E  FFFF               	dw	65535	; errata NOP
  1822  000B30                     __end_of_lcdan_set_write_mode:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           prodh	equ	0xFF4
  1829                           prodl	equ	0xFF3
  1830                           wreg	equ	0xFE8
  1831                           indf2	equ	0xFDF
  1832                           postinc2	equ	0xFDE
  1833                           postdec2	equ	0xFDD
  1834                           fsr2h	equ	0xFDA
  1835                           fsr2l	equ	0xFD9
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _lcdan_set_and_latch_8bits *****************
  1839 ;; Defined at:
  1840 ;;		line 220 in file "lcdan/lcdan.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  data            1    wreg     unsigned char 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  data            1    1[COMRAM] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;		None               void
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1854 ;;      Params:         0       0       0       0       0       0       0
  1855 ;;      Locals:         1       0       0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0
  1857 ;;      Totals:         1       0       0       0       0       0       0
  1858 ;;Total ram usage:        1 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    2
  1861 ;; This function calls:
  1862 ;;		_lcdan_set_and_latch_4bits
  1863 ;; This function is called by:
  1864 ;;		_lcdan_write_cmd
  1865 ;;		_lcdan_write_data
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text16
  1870  000AC0                     __ptext16:
  1871                           	opt stack 0
  1872  000AC0                     _lcdan_set_and_latch_8bits:
  1873                           	opt stack 27
  1874                           
  1875                           ;incstack = 0
  1876  000AC0  FFFF               	dw	65535
  1877                           
  1878                           ;lcdan_set_and_latch_8bits@data stored from wreg
  1879  000AC2  6E02               	movwf	lcdan_set_and_latch_8bits@data,c
  1880                           
  1881                           ;lcdan.c: 222: lcdan_set_and_latch_4bits(data);
  1882  000AC4  5002               	movf	lcdan_set_and_latch_8bits@data,w,c
  1883  000AC6  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1884                           
  1885                           ;lcdan.c: 223: lcdan_set_and_latch_4bits(data << 4);
  1886  000ACA  3802               	swapf	lcdan_set_and_latch_8bits@data,w,c
  1887  000ACC  0BF0               	andlw	240
  1888  000ACE  ECF5  F004         	call	_lcdan_set_and_latch_4bits
  1889  000AD2  0012               	return	
  1890  000AD4  FFFF               	dw	65535	; errata NOP
  1891  000AD6                     __end_of_lcdan_set_and_latch_8bits:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           prodh	equ	0xFF4
  1898                           prodl	equ	0xFF3
  1899                           wreg	equ	0xFE8
  1900                           indf2	equ	0xFDF
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _lcdan_set_and_latch_4bits *****************
  1908 ;; Defined at:
  1909 ;;		line 190 in file "lcdan/lcdan.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  data            1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  data            1    0[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		_lcdan_strobe_enable
  1932 ;; This function is called by:
  1933 ;;		_lcdan_set_and_latch_8bits
  1934 ;;		_lcdan_init
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text17
  1939  0009EA                     __ptext17:
  1940                           	opt stack 0
  1941  0009EA                     _lcdan_set_and_latch_4bits:
  1942                           	opt stack 27
  1943                           
  1944                           ;incstack = 0
  1945  0009EA  FFFF               	dw	65535
  1946                           
  1947                           ;lcdan_set_and_latch_4bits@data stored from wreg
  1948  0009EC  6E01               	movwf	lcdan_set_and_latch_4bits@data,c
  1949                           
  1950                           ;lcdan.c: 196: if (data & 0x80)
  1951  0009EE  AE01               	btfss	lcdan_set_and_latch_4bits@data,7,c
  1952  0009F0  D002               	goto	l814
  1953                           
  1954                           ;lcdan.c: 197: do{LATD |= (0x01<<7);}while(0);
  1955  0009F2  8E8C               	bsf	3980,7,c	;volatile
  1956  0009F4  D001               	goto	l816
  1957  0009F6                     l814:
  1958  0009F6  9E8C               	bcf	3980,7,c	;volatile
  1959  0009F8                     l816:
  1960                           
  1961                           ;lcdan.c: 201: if (data & 0x40)
  1962  0009F8  AC01               	btfss	lcdan_set_and_latch_4bits@data,6,c
  1963  0009FA  D002               	goto	l820
  1964                           
  1965                           ;lcdan.c: 202: do{LATD |= (0x01<<6);}while(0);
  1966  0009FC  8C8C               	bsf	3980,6,c	;volatile
  1967  0009FE  D001               	goto	l822
  1968  000A00                     l820:
  1969  000A00  9C8C               	bcf	3980,6,c	;volatile
  1970  000A02                     l822:
  1971                           
  1972                           ;lcdan.c: 206: if (data & 0x20)
  1973  000A02  AA01               	btfss	lcdan_set_and_latch_4bits@data,5,c
  1974  000A04  D002               	goto	l826
  1975                           
  1976                           ;lcdan.c: 207: do{LATD |= (0x01<<5);}while(0);
  1977  000A06  8A8C               	bsf	3980,5,c	;volatile
  1978  000A08  D001               	goto	l828
  1979  000A0A                     l826:
  1980  000A0A  9A8C               	bcf	3980,5,c	;volatile
  1981  000A0C                     l828:
  1982                           
  1983                           ;lcdan.c: 211: if (data & 0x10)
  1984  000A0C  A801               	btfss	lcdan_set_and_latch_4bits@data,4,c
  1985  000A0E  D002               	goto	l832
  1986                           
  1987                           ;lcdan.c: 212: do{LATD |= (0x01<<4);}while(0);
  1988  000A10  888C               	bsf	3980,4,c	;volatile
  1989  000A12  D001               	goto	l834
  1990  000A14                     l832:
  1991  000A14  988C               	bcf	3980,4,c	;volatile
  1992  000A16                     l834:
  1993                           
  1994                           ;lcdan.c: 216: lcdan_strobe_enable();
  1995  000A16  EC38  F005         	call	_lcdan_strobe_enable	;wreg free
  1996  000A1A  0012               	return	
  1997  000A1C  FFFF               	dw	65535	; errata NOP
  1998  000A1E                     __end_of_lcdan_set_and_latch_4bits:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           prodh	equ	0xFF4
  2005                           prodl	equ	0xFF3
  2006                           wreg	equ	0xFE8
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _lcdan_strobe_enable *****************
  2015 ;; Defined at:
  2016 ;;		line 172 in file "lcdan/lcdan.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;		None               void
  2023 ;; Registers used:
  2024 ;;		status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2030 ;;      Params:         0       0       0       0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0
  2033 ;;      Totals:         0       0       0       0       0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_lcdan_set_and_latch_4bits
  2040 ;;		_lcdan_init
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text18
  2045  000A70                     __ptext18:
  2046                           	opt stack 0
  2047  000A70                     _lcdan_strobe_enable:
  2048                           	opt stack 27
  2049                           
  2050                           ;incstack = 0
  2051  000A70  FFFF               	dw	65535
  2052                           
  2053                           ;lcdan.c: 181: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  2054  000A72  F000               	nop	
  2055  000A74  D000               	nop2		;2 cycle nop
  2056  000A76  D000               	nop2		;2 cycle nop
  2057                           
  2058                           ;lcdan.c: 182: do{LATD |= (0x01<<3);}while(0);
  2059  000A78  868C               	bsf	3980,3,c	;volatile
  2060                           
  2061                           ;lcdan.c: 183: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  2062  000A7A  F000               	nop	
  2063  000A7C  D000               	nop2		;2 cycle nop
  2064  000A7E  D000               	nop2		;2 cycle nop
  2065                           
  2066                           ;lcdan.c: 184: do{LATD &= (~(0x01<<3));}while(0);
  2067  000A80  968C               	bcf	3980,3,c	;volatile
  2068                           
  2069                           ;lcdan.c: 185: do{_delay((unsigned long)((1)*(20000000/4000000.0)));}while(0);
  2070  000A82  F000               	nop	
  2071  000A84  D000               	nop2		;2 cycle nop
  2072  000A86  D000               	nop2		;2 cycle nop
  2073  000A88  0012               	return	
  2074  000A8A  FFFF               	dw	65535	; errata NOP
  2075  000A8C                     __end_of_lcdan_strobe_enable:
  2076                           	opt stack 0
  2077                           tblptru	equ	0xFF8
  2078                           tblptrh	equ	0xFF7
  2079                           tblptrl	equ	0xFF6
  2080                           tablat	equ	0xFF5
  2081                           prodh	equ	0xFF4
  2082                           prodl	equ	0xFF3
  2083                           wreg	equ	0xFE8
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _lcdan_set_controlpins_and_datapins_outputs *****************
  2092 ;; Defined at:
  2093 ;;		line 60 in file "lcdan/lcdan.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		status,2, status,0
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2107 ;;      Params:         0       0       0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0
  2110 ;;      Totals:         0       0       0       0       0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_lcdan_init
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text19
  2121  000AD6                     __ptext19:
  2122                           	opt stack 0
  2123  000AD6                     _lcdan_set_controlpins_and_datapins_outputs:
  2124                           	opt stack 29
  2125                           
  2126                           ;incstack = 0
  2127  000AD6  FFFF               	dw	65535
  2128                           
  2129                           ;lcdan.c: 65: do{ TRISD &= (~(1<<1)); }while(0);
  2130  000AD8  9295               	bcf	3989,1,c	;volatile
  2131                           
  2132                           ;lcdan.c: 66: do{ TRISD &= (~(1<<2)); }while(0);
  2133  000ADA  9495               	bcf	3989,2,c	;volatile
  2134                           
  2135                           ;lcdan.c: 67: do{ TRISD &= (~(1<<3)); }while(0);
  2136  000ADC  9695               	bcf	3989,3,c	;volatile
  2137                           
  2138                           ;lcdan.c: 68: do{ TRISD &= (~(1<<4)); }while(0);
  2139  000ADE  9895               	bcf	3989,4,c	;volatile
  2140                           
  2141                           ;lcdan.c: 69: do{ TRISD &= (~(1<<5)); }while(0);
  2142  000AE0  9A95               	bcf	3989,5,c	;volatile
  2143                           
  2144                           ;lcdan.c: 70: do{ TRISD &= (~(1<<6)); }while(0);
  2145  000AE2  9C95               	bcf	3989,6,c	;volatile
  2146                           
  2147                           ;lcdan.c: 71: do{ TRISD &= (~(1<<7)); }while(0);
  2148  000AE4  9E95               	bcf	3989,7,c	;volatile
  2149  000AE6  0012               	return	
  2150  000AE8  FFFF               	dw	65535	; errata NOP
  2151  000AEA                     __end_of_lcdan_set_controlpins_and_datapins_outputs:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           prodh	equ	0xFF4
  2158                           prodl	equ	0xFF3
  2159                           wreg	equ	0xFE8
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _delay_ms *****************
  2168 ;; Defined at:
  2169 ;;		line 26 in file "main.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  n               2    0[COMRAM] unsigned int 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;		None               void
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2183 ;;      Params:         2       0       0       0       0       0       0
  2184 ;;      Locals:         0       0       0       0       0       0       0
  2185 ;;      Temps:          1       0       0       0       0       0       0
  2186 ;;      Totals:         3       0       0       0       0       0       0
  2187 ;;Total ram usage:        3 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text20
  2197  000A48                     __ptext20:
  2198                           	opt stack 0
  2199  000A48                     _delay_ms:
  2200                           	opt stack 30
  2201                           
  2202                           ;incstack = 0
  2203  000A48  FFFF               	dw	65535
  2204                           
  2205                           ;main.c: 31: while(n--) _delay(5000);
  2206  000A4A  D007               	goto	l936
  2207  000A4C                     l934:
  2208  000A4C  0E05               	movlw	5
  2209  000A4E  6E03               	movwf	??_delay_ms& (0+255),c
  2210  000A50  0EDF               	movlw	223
  2211  000A52                     u407:
  2212  000A52  2EE8               	decfsz	wreg,f,c
  2213  000A54  D7FE               	goto	u407
  2214  000A56  2E03               	decfsz	??_delay_ms& (0+255),f,c
  2215  000A58  D7FC               	goto	u407
  2216  000A5A                     l936:
  2217  000A5A  0601               	decf	delay_ms@n,f,c
  2218  000A5C  A0D8               	btfss	status,0,c
  2219  000A5E  0602               	decf	delay_ms@n+1,f,c
  2220  000A60  2801               	incf	delay_ms@n& (0+255),w,c
  2221  000A62  B4D8               	btfsc	status,2,c
  2222  000A64  2802               	incf	(delay_ms@n+1)& (0+255),w,c
  2223  000A66  B4D8               	btfsc	status,2,c
  2224  000A68  0012               	return	
  2225  000A6A  FFFF               	dw	65535	; assembler added errata NOP
  2226  000A6C  D7EF               	goto	l934
  2227  000A6E  FFFF               	dw	65535	; errata NOP
  2228  000A70                     __end_of_delay_ms:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           prodh	equ	0xFF4
  2235                           prodl	equ	0xFF3
  2236                           wreg	equ	0xFE8
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           fsr2h	equ	0xFDA
  2241                           fsr2l	equ	0xFD9
  2242                           status	equ	0xFD8
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           wreg	equ	0xFE8
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257                           	psect	rparam
  2258  0000                     tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           prodh	equ	0xFF4
  2263                           prodl	equ	0xFF3
  2264                           wreg	equ	0xFE8
  2265                           indf2	equ	0xFDF
  2266                           postinc2	equ	0xFDE
  2267                           postdec2	equ	0xFDD
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     42      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@buff(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S123$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    lcdan_print_string@p	PTR const unsigned char  size(2) Largest target is 10
		 -> main@buff(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcdan_print_string->_lcdan_write_data
    _lcdan_write_data->_lcdan_test_busy
    _lcdan_init->_lcdan_write_cmd
    _lcdan_write_cmd->_lcdan_test_busy
    _lcdan_test_busy->_lcdan_get_data
    _lcdan_set_and_latch_8bits->_lcdan_set_and_latch_4bits

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    1559
                                             30 COMRAM    12    12      0
                           _delay_ms
                         _lcdan_init
                 _lcdan_print_string
                    _lcdan_write_cmd
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    12      6     783
                                             12 COMRAM    18    12      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     191
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     191
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdan_print_string                                   2     0      2     243
                                             12 COMRAM     2     0      2
                   _lcdan_write_data
 ---------------------------------------------------------------------------------
 (2) _lcdan_write_data                                     1     1      0     170
                                             11 COMRAM     1     1      0
          _lcdan_set_and_latch_8bits
                _lcdan_set_data_mode
               _lcdan_set_write_mode
                    _lcdan_test_busy
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_data_mode                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdan_init                                           1     1      0     230
                                             12 COMRAM     1     1      0
          _lcdan_set_and_latch_4bits
             _lcdan_set_command_mode
_lcdan_set_controlpins_and_datapins_
               _lcdan_set_write_mode
                _lcdan_strobe_enable
                    _lcdan_write_cmd
 ---------------------------------------------------------------------------------
 (1) _lcdan_write_cmd                                      1     1      0     170
                                             11 COMRAM     1     1      0
          _lcdan_set_and_latch_8bits
             _lcdan_set_command_mode
               _lcdan_set_write_mode
                    _lcdan_test_busy
 ---------------------------------------------------------------------------------
 (2) _lcdan_test_busy                                      3     3      0      65
                                              8 COMRAM     3     3      0
                     _lcdan_get_data
             _lcdan_set_command_mode
          _lcdan_set_datapins_inputs
         _lcdan_set_datapins_outputs
                _lcdan_set_read_mode
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_read_mode                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_datapins_outputs                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_datapins_inputs                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_command_mode                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcdan_get_data                                       8     8      0       0
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (2) _lcdan_set_write_mode                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcdan_set_and_latch_8bits                            1     1      0      90
                                              1 COMRAM     1     1      0
          _lcdan_set_and_latch_4bits
 ---------------------------------------------------------------------------------
 (3) _lcdan_set_and_latch_4bits                            1     1      0      60
                                              0 COMRAM     1     1      0
                _lcdan_strobe_enable
 ---------------------------------------------------------------------------------
 (4) _lcdan_strobe_enable                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcdan_set_controlpins_and_datapins_outputs           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             3     1      2      58
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _lcdan_init
     _lcdan_set_and_latch_4bits
       _lcdan_strobe_enable
     _lcdan_set_command_mode
     _lcdan_set_controlpins_and_datapins_outputs
     _lcdan_set_write_mode
     _lcdan_strobe_enable
     _lcdan_write_cmd
       _lcdan_set_and_latch_8bits
         _lcdan_set_and_latch_4bits
           _lcdan_strobe_enable
       _lcdan_set_command_mode
       _lcdan_set_write_mode
       _lcdan_test_busy
         _lcdan_get_data
         _lcdan_set_command_mode
         _lcdan_set_datapins_inputs
         _lcdan_set_datapins_outputs
         _lcdan_set_read_mode
   _lcdan_print_string
     _lcdan_write_data
       _lcdan_set_and_latch_8bits
         _lcdan_set_and_latch_4bits
           _lcdan_strobe_enable
       _lcdan_set_data_mode
       _lcdan_set_write_mode
       _lcdan_test_busy
         _lcdan_get_data
         _lcdan_set_command_mode
         _lcdan_set_datapins_inputs
         _lcdan_set_datapins_outputs
         _lcdan_set_read_mode
   _lcdan_write_cmd
     _lcdan_set_and_latch_8bits
       _lcdan_set_and_latch_4bits
         _lcdan_strobe_enable
     _lcdan_set_command_mode
     _lcdan_set_write_mode
     _lcdan_test_busy
       _lcdan_get_data
       _lcdan_set_command_mode
       _lcdan_set_datapins_inputs
       _lcdan_set_datapins_outputs
       _lcdan_set_read_mode
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     2A      2A       1       33.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Feb 12 17:50:40 2015

                                 __size_of_lcdan_set_data_mode 0008  
                                                           u55 0836  
                                                           u65 0846  
                                                           u75 0856  
                                                           u85 0866  
                                                           u95 0876  
                                                  __CFG_OSC$HS 000000  
                                                          l820 0A00  
                                                          l900 0966  
                                                          l822 0A02  
                                                          l814 09F6  
                                                          l902 096E  
                                                          l727 0998  
                                                          l832 0A14  
                                                          l816 09F8  
                                                          l912 098E  
                                                          l904 0972  
                                                          l920 09B4  
                                                          l737 09DE  
                                                          l834 0A16  
                                                          l826 0A0A  
                                                          l850 0904  
                                                          l922 09BC  
                                                          l828 0A0C  
                                                          l924 09C0  
                                                          l934 0A4C  
                                                          l936 0A5A  
                                                          l864 0920  
                                                          l856 090A  
                                                          l928 09D4  
                                                          l866 092C  
                                                          l980 0662  
                                                          l990 069A  
                                                          l974 0636  
                                                          l968 061C  
                                                          u407 0A52  
                                                          u347 078A  
                                                          u357 0798  
                                                          u367 07A6  
                                                          u377 07B4  
                                                          u387 07D0  
                                                          u397 07E2  
                                                 __CFG_BOR$OFF 000000  
                                                 __CFG_BORV$20 000000  
                                                          wreg 000FE8  
                                             ?_lcdan_test_busy 0001  
                                                 __CFG_LVP$OFF 000000  
                                                 __CFG_WDT$OFF 000000  
                                                         l1010 06F2  
                                                         l1012 06F8  
                                                         l1004 06D6  
                                                         l1020 0756  
                                                         l1022 076E  
                                                         l1032 0A34  
                                                         l1018 074E  
                                                         l1028 0A22  
                                                         l1048 089C  
                                                         STR_1 060B  
                                                         _LATD 000F8C  
                                                 __CFG_PWRT$ON 000000  
                                  ??_lcdan_set_and_latch_4bits 0001  
                                  ??_lcdan_set_and_latch_8bits 0002  
                              __size_of_lcdan_set_command_mode 0008  
                                                         _main 088E  
                                                         fsr2h 000FDA  
                                                         indf2 000FDF  
                                                         fsr2l 000FD9  
                                                         prodh 000FF4  
                                                         prodl 000FF3  
                                                         start 0002  
                                 __size_of_lcdan_set_read_mode 0008  
                                             ?_lcdan_write_cmd 0001  
                                                __CFG_OSCS$OFF 000000  
                                                        ?_main 0001  
                                               __CFG_DEBUG$OFF 000000  
                                              __end_of___lwdiv 09A4  
                                              __end_of___lwmod 09EA  
                                                        _PORTD 000F83  
                                                        _TRISD 000F95  
                                              __end_of_dpowers 060B  
                                                        main@n 0029  
                                                        tablat 000FF5  
                                                        status 000FD8  
                                              __end_of_sprintf 077E  
                                            ?_lcdan_write_data 0001  
                                           ??_lcdan_write_data 000C  
                                              __initialization 0B06  
                                                 __end_of_main 08F0  
                                   ?_lcdan_set_datapins_inputs 0001  
                                    _lcdan_set_and_latch_4bits 09EA  
                                    _lcdan_set_and_latch_8bits 0AC0  
                                       _lcdan_set_command_mode 0B20  
                                                       ??_main 001F  
                                                __activetblptr 000002  
                                             __end_of_delay_ms 0A70  
                                                    ??___lwdiv 0005  
                                                    ??___lwmod 000C  
                                                 __mediumconst 0000  
                                                       tblptrh 000FF7  
                                                       tblptrl 000FF6  
                                                       tblptru 000FF8  
                                             ??_lcdan_get_data 0001  
                                                    ??_sprintf 0013  
                                          _lcdan_set_data_mode 0B10  
                                           _lcdan_print_string 0A1E  
                                  __end_of_lcdan_strobe_enable 0A8C  
                                                   __accesstop 0080  
                                      __end_of__initialization 0B06  
                                __size_of_lcdan_set_write_mode 0008  
                                          ?_lcdan_print_string 000D  
                                               __pcstackCOMRAM 0001  
                                         ?_lcdan_set_data_mode 0001  
                                             lcdan_test_busy@i 000B  
                                          lcdan_print_string@p 000D  
                                         lcdan_write_data@data 000C  
                                          _lcdan_set_read_mode 0B18  
                                         ??_lcdan_print_string 000F  
                                         ?_lcdan_set_read_mode 0001  
                                        ??_lcdan_set_data_mode 0001  
                                                    ?_delay_ms 0001  
                                                   _lcdan_init 077E  
                           __size_of_lcdan_set_and_latch_4bits 0034  
                           __size_of_lcdan_set_and_latch_8bits 0016  
                                     __size_of_lcdan_test_busy 005E  
                                        ??_lcdan_set_read_mode 0001  
                                                      __Hparam 0000  
                                                      __Lparam 0000  
                                      ?_lcdan_set_command_mode 0001  
                                                      ___lwdiv 094E  
                                                      ___lwmod 09A4  
                                  ??_lcdan_set_datapins_inputs 0001  
                                                 __psmallconst 0600  
                                     __size_of_lcdan_write_cmd 001A  
                                                      __pcinit 0B06  
                                                      __ramtop 0600  
                                    __size_of_lcdan_write_data 001A  
                                                      __ptext0 088E  
                                                      __ptext1 0610  
                                                      __ptext2 09A4  
                                                      __ptext3 094E  
                                                      __ptext4 0A1E  
                                                      __ptext5 0A8C  
                                                      __ptext6 0B10  
                                                      __ptext7 077E  
                                                      __ptext8 0AA6  
                                                      __ptext9 08F0  
                                 ??_lcdan_set_datapins_outputs 0001  
                                                      _dpowers 0601  
                                                   ??_delay_ms 0003  
                                                      _sprintf 0610  
                            __end_of_lcdan_set_and_latch_4bits 0A1E  
                            __end_of_lcdan_set_and_latch_8bits 0AD6  
                                         end_of_initialization 0B06  
                                                __Lmediumconst 0000  
                               __end_of_lcdan_set_command_mode 0B28  
                          __size_of_lcdan_set_datapins_outputs 000E  
                                                      postdec2 000FDD  
                                                      postinc2 000FDE  
                                                  ?_lcdan_init 0001  
                                    _lcdan_set_datapins_inputs 0AF8  
                                            ??_lcdan_test_busy 0009  
                                 __end_of_lcdan_set_write_mode 0B30  
                                          start_initialization 0B06  
                                            ??_lcdan_write_cmd 000C  
                                           lcdan_write_cmd@cmd 000C  
                                lcdan_set_and_latch_4bits@data 0001  
                                 __size_of_lcdan_strobe_enable 001C  
                                          __size_of_lcdan_init 009A  
                                lcdan_set_and_latch_8bits@data 0002  
                           __end_of_lcdan_set_datapins_outputs 0AF8  
                                   _lcdan_set_datapins_outputs 0AEA  
                                             _lcdan_write_data 0A8C  
                                  __size_of_lcdan_print_string 002A  
                                          __end_of__stringdata 060E  
                                            __size_of_delay_ms 0028  
                                                  sprintf@_val 0019  
                                                  sprintf@flag 0017  
                                                  sprintf@prec 0018  
                                  __end_of_lcdan_set_data_mode 0B18  
                                      __size_of_lcdan_get_data 0076  
                                             ___lwdiv@dividend 0001  
                                                     ?___lwdiv 0001  
                                                     ?___lwmod 0008  
                                                  __smallconst 0600  
                                             ___lwdiv@quotient 0005  
                                                     ?_sprintf 000D  
                                  __end_of_lcdan_set_read_mode 0B20  
                                         _lcdan_set_write_mode 0B28  
                                                    delay_ms@n 0001  
                           __size_of_lcdan_set_datapins_inputs 000E  
                                                  __stringdata 060B  
                                                 ??_lcdan_init 000D  
                                              _lcdan_test_busy 08F0  
                                   ?_lcdan_set_and_latch_4bits 0001  
                                        ?_lcdan_set_write_mode 0001  
                                   ?_lcdan_set_and_latch_8bits 0001  
                                                     __Hrparam 0000  
                                                     __Lrparam 0000  
                            __end_of_lcdan_set_datapins_inputs 0B06  
                                           __end_of_lcdan_init 0818  
                                              _lcdan_write_cmd 0AA6  
                                             __size_of___lwdiv 0056  
                                             __size_of___lwmod 0046  
                                                     _delay_ms 0A48  
                                              ___lwdiv@divisor 0003  
                                          _lcdan_strobe_enable 0A70  
                                              ___lwdiv@counter 0007  
                                                     __ptext10 0B18  
                                                     __ptext11 0AEA  
                                                     __ptext20 0A48  
                                                     __ptext12 0AF8  
                                                     __ptext13 0B20  
                                                     __ptext14 0818  
                                                     __ptext15 0B28  
                                                     __ptext16 0AC0  
                                                     __ptext17 09EA  
                                                     __ptext18 0A70  
                                                     __ptext19 0AD6  
                                             __size_of_sprintf 016E  
                                     __end_of_lcdan_write_data 0AA6  
                                                __size_of_main 0062  
                                               _lcdan_get_data 0818  
                                         ?_lcdan_strobe_enable 0001  
                                                     main@buff 001F  
                                  ?_lcdan_set_datapins_outputs 0001  
                                      __end_of_lcdan_test_busy 094E  
           __end_of_lcdan_set_controlpins_and_datapins_outputs 0AEA  
          __size_of_lcdan_set_controlpins_and_datapins_outputs 0014  
                 ??_lcdan_set_controlpins_and_datapins_outputs 0001  
                  ?_lcdan_set_controlpins_and_datapins_outputs 0001  
                   _lcdan_set_controlpins_and_datapins_outputs 0AD6  
                                     lcdan_test_busy@busy_addr 000A  
                                       ??_lcdan_set_write_mode 0001  
                                                    sprintf@ap 0015  
                                                    sprintf@sp 000D  
                                     ??_lcdan_set_command_mode 0001  
                                       __end_of_lcdan_get_data 088E  
                                             ___lwmod@dividend 0008  
                                      __end_of_lcdan_write_cmd 0AC0  
                                        ??_lcdan_strobe_enable 0001  
                                                     sprintf@c 001E  
                                                     sprintf@f 000F  
                                   __end_of_lcdan_print_string 0A48  
                                              ___lwmod@divisor 000A  
                                              ___lwmod@counter 000C  
                                              ?_lcdan_get_data 0001  
